from telegram import Update
from telegram.ext import Application, CallbackContext, CommandHandler, MessageHandler, filters

from .motivation import get_random_quote

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
users = {}


async def start(update: Update, context: CallbackContext):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –≤–∞–º —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –¥–Ω–µ–≤–Ω—ã–µ –Ω–æ—Ä–º—ã –≤–æ–¥—ã –∏ –∫–∞–ª–æ—Ä–∏–π, –∞ —Ç–∞–∫–∂–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø–∏—Ç–∞–Ω–∏–µ –∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏."
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /set_profile –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è."
    )


async def set_profile(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    users[user_id] = {}
    context.user_data["profile_step"] = "weight"
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–µ—Å (–≤ –∫–≥):")


async def handle_profile_input(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    step = context.user_data.get("profile_step")

    if not step:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /set_profile.")
        return

    if step == "weight":
        users[user_id]["weight"] = int(update.message.text)
        context.user_data["profile_step"] = "height"
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç (–≤ —Å–º):")

    elif step == "height":
        users[user_id]["height"] = int(update.message.text)
        context.user_data["profile_step"] = "age"
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:")

    elif step == "age":
        users[user_id]["age"] = int(update.message.text)
        context.user_data["profile_step"] = "activity"
        await update.message.reply_text("–°–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —É –≤–∞—Å –≤ –¥–µ–Ω—å?")

    elif step == "activity":
        users[user_id]["activity"] = int(update.message.text)
        context.user_data["profile_step"] = "city"
        await update.message.reply_text("–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å?")

    elif step == "city":
        users[user_id]["city"] = update.message.text
        context.user_data.pop("profile_step")
        weight = users[user_id]["weight"]
        activity = users[user_id]["activity"]

        # –†–∞—Å—á—ë—Ç –Ω–æ—Ä–º –≤–æ–¥—ã –∏ –∫–∞–ª–æ—Ä–∏–π
        water_goal = weight * 30 + (500 if activity > 30 else 0)
        calorie_goal = (
            10 * weight + 6.25 * users[user_id]["height"] - 5 * users[user_id]["age"] + 200
        )

        users[user_id]["water_goal"] = water_goal
        users[user_id]["calorie_goal"] = calorie_goal
        users[user_id]["logged_water"] = 0
        users[user_id]["logged_calories"] = 0
        users[user_id]["burned_calories"] = 0

        await update.message.reply_text(
            f"–ü—Ä–æ—Ñ–∏–ª—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω! \n\n–í–∞—à–∞ –¥–Ω–µ–≤–Ω–∞—è –Ω–æ—Ä–º–∞ –≤–æ–¥—ã: {water_goal} –º–ª.\n–í–∞—à–∞ –¥–Ω–µ–≤–Ω–∞—è –Ω–æ—Ä–º–∞ –∫–∞–ª–æ—Ä–∏–π: {calorie_goal} –∫–∫–∞–ª."
        )


async def log_water(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    if user_id not in users:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /set_profile."
        )
        return

    try:
        amount = int(context.args[0])
    except (IndexError, ValueError):
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /log_water <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ>")
        return

    users[user_id]["logged_water"] += amount
    remaining = users[user_id]["water_goal"] - users[user_id]["logged_water"]
    await update.message.reply_text(
        f"–ó–∞–ø–∏—Å–∞–Ω–æ: {amount} –º–ª –≤–æ–¥—ã. –û—Å—Ç–∞–ª–æ—Å—å –¥–æ —Ü–µ–ª–∏: {remaining if remaining > 0 else 0} –º–ª."
    )


async def check_progress(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    if user_id not in users:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /set_profile."
        )
        return

    user_data = users[user_id]
    water_progress = f"–í—ã–ø–∏—Ç–æ: {user_data['logged_water']} –º–ª –∏–∑ {user_data['water_goal']} –º–ª."
    calorie_progress = (
        f"–ü–æ—Ç—Ä–µ–±–ª–µ–Ω–æ: {user_data['logged_calories']} –∫–∫–∞–ª –∏–∑ {user_data['calorie_goal']} –∫–∫–∞–ª.\n"
        f"–°–æ–∂–∂–µ–Ω–æ: {user_data['burned_calories']} –∫–∫–∞–ª."
    )
    await update.message.reply_text(
        f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å:\n\n–í–æ–¥–∞:\n{water_progress}\n\n–ö–∞–ª–æ—Ä–∏–∏:\n{calorie_progress}"
    )


async def motivation(update: Update, context: CallbackContext):
    await update.message.reply_text(get_random_quote)


async def help(update: Update, context: CallbackContext):
    help_text = """This is bot for tracking kkal and water.
    There are available commands:
    - /start (start this bot)
    - /set_profile (set profile or reset profile)
    - /log_water [Milliliters] (add)
    - /check_progress (see current progress for the day)
    - /log_food [Food Name] (track consumed food)
    - /help (get this help message)
    - /motivation
    """
    await update.message.reply_text(help_text)


async def main():
    application = Application.builder().token("TOKEN").build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("set_profile", set_profile))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_profile_input))
    application.add_handler(CommandHandler("log_water", log_water))
    application.add_handler(CommandHandler("check_progress", check_progress))
    application.add_handler(CommandHandler("help"))

    application.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == "__main__":
    main()
